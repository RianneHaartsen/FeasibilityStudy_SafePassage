%% Safe Passage; 5) Extraction of EEG metrics for statistical analyses in R

% This script finds out whether there is a peak in the frequency band of interest.
% If yes, frequency and amplitude of that peak (or largest one if multiple)
% are saved; if no, values are NaNs. This data is based on the tables
% generated by SafePassage_04_ExtractionEEGmeasures.m.
% This is done for theta and alpha band, for each region. 
% Theta = 4:7 Hz
% Alpha = 8:12 Hz


% Output:
% 1 table with variables for social condition: SP_Soc_FOOOFPeaks_perRegion
% 1 table with variables for non-social condition: SP_NSoc_FOOOFPeaks_perRegion

% Created by Rianne Haartsen, July 2022

addpath('XXX/Safe_Passage')

%% Social condition

cd('XXX')
load SP_Soc_EEGmeasures_perRegion.mat

% Front %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Front all freqs
pks_Freqs = [SP_Soc_EEGmeasures_perRegion.Fr_peak1Freq SP_Soc_EEGmeasures_perRegion.Fr_peak2Freq ...
    SP_Soc_EEGmeasures_perRegion.Fr_peak3Freq];
% Front all ampls
pks_Ampls = [SP_Soc_EEGmeasures_perRegion.Fr_peak1Ampl SP_Soc_EEGmeasures_perRegion.Fr_peak2Ampl ...
    SP_Soc_EEGmeasures_perRegion.Fr_peak3Ampl];

Social_pks = struct();
Social_pks.Fr_theta_Freq = zeros(size(pks_Freqs,1),1);
Social_pks.Fr_theta_Ampl = zeros(size(pks_Freqs,1),1);
Social_pks.Fr_alpha_Freq = zeros(size(pks_Freqs,1),1);
Social_pks.Fr_alpha_Ampl = zeros(size(pks_Freqs,1),1);

for ss = 1:size(pks_Freqs,1)
    Freqs_cur = pks_Freqs(ss,:);
    Ampls_cur = pks_Ampls(ss,:);
    % theta
    Ind_th = find((7 >= Freqs_cur) & (Freqs_cur >= 4));
    if isempty(Ind_th) % no theta peak
        Social_pks.Fr_theta_Freq(ss) = NaN;
        Social_pks.Fr_theta_Ampl(ss) = NaN;
    elseif size(Ind_th,2) == 1 % 1 peak in theta
        Social_pks.Fr_theta_Freq(ss) = Freqs_cur(1,Ind_th);
        Social_pks.Fr_theta_Ampl(ss) = Ampls_cur(1,Ind_th);
    elseif size(Ind_th,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple theta peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_th);
        Th_pks_am = Ampls_cur(1,Ind_th);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        Social_pks.Fr_theta_Freq(ss) = Th_pks_fr(Ind_lp);
        Social_pks.Fr_theta_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
        
    end
    clear Ind_th
    
    % alpha
    Ind_al = find((12 >= Freqs_cur) & (Freqs_cur >= 8));
    if isempty(Ind_al) % no alpha peak
        Social_pks.Fr_alpha_Freq(ss) = NaN;
        Social_pks.Fr_alpha_Ampl(ss) = NaN;
    elseif size(Ind_al,2) == 1 % 1 peak in alpha
        Social_pks.Fr_alpha_Freq(ss) = Freqs_cur(1,Ind_al);
        Social_pks.Fr_alpha_Ampl(ss) = Ampls_cur(1,Ind_al);
    elseif size(Ind_al,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple alpha peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_al);
        Th_pks_am = Ampls_cur(1,Ind_al);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        Social_pks.Fr_alpha_Freq(ss) = Th_pks_fr(Ind_lp);
        Social_pks.Fr_alpha_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
    end
    clear Ind_al
    clear Freqs_cur Ampls_cur
end 

clear ss pks_Ampls pks_Freqs

% Central %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ce all freqs
pks_Freqs = [SP_Soc_EEGmeasures_perRegion.Ce_peak1Freq SP_Soc_EEGmeasures_perRegion.Ce_peak2Freq ...
    SP_Soc_EEGmeasures_perRegion.Ce_peak3Freq];
% Ce all ampls
pks_Ampls = [SP_Soc_EEGmeasures_perRegion.Ce_peak1Ampl SP_Soc_EEGmeasures_perRegion.Ce_peak2Ampl ...
    SP_Soc_EEGmeasures_perRegion.Ce_peak3Ampl];

Social_pks.Ce_theta_Freq = zeros(size(pks_Freqs,1),1);
Social_pks.Ce_theta_Ampl = zeros(size(pks_Freqs,1),1);
Social_pks.Ce_alpha_Freq = zeros(size(pks_Freqs,1),1);
Social_pks.Ce_alpha_Ampl = zeros(size(pks_Freqs,1),1);

for ss = 1:size(pks_Freqs,1)
    Freqs_cur = pks_Freqs(ss,:);
    Ampls_cur = pks_Ampls(ss,:);
    % theta
    Ind_th = find((7 >= Freqs_cur) & (Freqs_cur >= 4));
    if isempty(Ind_th) % no theta peak
        Social_pks.Ce_theta_Freq(ss) = NaN;
        Social_pks.Ce_theta_Ampl(ss) = NaN;
    elseif size(Ind_th,2) == 1 % 1 peak in theta
        Social_pks.Ce_theta_Freq(ss) = Freqs_cur(1,Ind_th);
        Social_pks.Ce_theta_Ampl(ss) = Ampls_cur(1,Ind_th);
    elseif size(Ind_th,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple theta peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_th);
        Th_pks_am = Ampls_cur(1,Ind_th);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        Social_pks.Ce_theta_Freq(ss) = Th_pks_fr(Ind_lp);
        Social_pks.Ce_theta_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
        
    end
    clear Ind_th
    
    % alpha
    Ind_al = find((12 >= Freqs_cur) & (Freqs_cur >= 8));
    if isempty(Ind_al) % no alpha peak
        Social_pks.Ce_alpha_Freq(ss) = NaN;
        Social_pks.Ce_alpha_Ampl(ss) = NaN;
    elseif size(Ind_al,2) == 1 % 1 peak in alpha
        Social_pks.Ce_alpha_Freq(ss) = Freqs_cur(1,Ind_al);
        Social_pks.Ce_alpha_Ampl(ss) = Ampls_cur(1,Ind_al);
    elseif size(Ind_al,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple alpha peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_al);
        Th_pks_am = Ampls_cur(1,Ind_al);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        Social_pks.Ce_alpha_Freq(ss) = Th_pks_fr(Ind_lp);
        Social_pks.Ce_alpha_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
    end
    clear Ind_al
    clear Freqs_cur Ampls_cur
end 

clear ss pks_Ampls pks_Freqs

% Parietal %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Pa all freqs
pks_Freqs = [SP_Soc_EEGmeasures_perRegion.Pa_peak1Freq SP_Soc_EEGmeasures_perRegion.Pa_peak2Freq ...
    SP_Soc_EEGmeasures_perRegion.Pa_peak3Freq];
% Pa all ampls
pks_Ampls = [SP_Soc_EEGmeasures_perRegion.Pa_peak1Ampl SP_Soc_EEGmeasures_perRegion.Pa_peak2Ampl ...
    SP_Soc_EEGmeasures_perRegion.Pa_peak3Ampl];

Social_pks.Pa_theta_Freq = zeros(size(pks_Freqs,1),1);
Social_pks.Pa_theta_Ampl = zeros(size(pks_Freqs,1),1);
Social_pks.Pa_alpha_Freq = zeros(size(pks_Freqs,1),1);
Social_pks.Pa_alpha_Ampl = zeros(size(pks_Freqs,1),1);

for ss = 1:size(pks_Freqs,1)
    Freqs_cur = pks_Freqs(ss,:);
    Ampls_cur = pks_Ampls(ss,:);
    % theta
    Ind_th = find((7 >= Freqs_cur) & (Freqs_cur >= 4));
    if isempty(Ind_th) % no theta peak
        Social_pks.Pa_theta_Freq(ss) = NaN;
        Social_pks.Pa_theta_Ampl(ss) = NaN;
    elseif size(Ind_th,2) == 1 % 1 peak in theta
        Social_pks.Pa_theta_Freq(ss) = Freqs_cur(1,Ind_th);
        Social_pks.Pa_theta_Ampl(ss) = Ampls_cur(1,Ind_th);
    elseif size(Ind_th,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple theta peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_th);
        Th_pks_am = Ampls_cur(1,Ind_th);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        Social_pks.Pa_theta_Freq(ss) = Th_pks_fr(Ind_lp);
        Social_pks.Pa_theta_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
        
    end
    clear Ind_th
    
    % alpha
    Ind_al = find((12 >= Freqs_cur) & (Freqs_cur >= 8));
    if isempty(Ind_al) % no alpha peak
        Social_pks.Pa_alpha_Freq(ss) = NaN;
        Social_pks.Pa_alpha_Ampl(ss) = NaN;
    elseif size(Ind_al,2) == 1 % 1 peak in alpha
        Social_pks.Pa_alpha_Freq(ss) = Freqs_cur(1,Ind_al);
        Social_pks.Pa_alpha_Ampl(ss) = Ampls_cur(1,Ind_al);
    elseif size(Ind_al,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple alpha peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_al);
        Th_pks_am = Ampls_cur(1,Ind_al);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        Social_pks.Pa_alpha_Freq(ss) = Th_pks_fr(Ind_lp);
        Social_pks.Pa_alpha_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
    end
    clear Ind_al
    clear Freqs_cur Ampls_cur
end 

clear ss pks_Ampls pks_Freqs


% Occipital %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Oc all freqs
pks_Freqs = [SP_Soc_EEGmeasures_perRegion.Oc_peak1Freq SP_Soc_EEGmeasures_perRegion.Oc_peak2Freq ...
    SP_Soc_EEGmeasures_perRegion.Oc_peak3Freq];
% Oc all ampls
pks_Ampls = [SP_Soc_EEGmeasures_perRegion.Oc_peak1Ampl SP_Soc_EEGmeasures_perRegion.Oc_peak2Ampl ...
    SP_Soc_EEGmeasures_perRegion.Oc_peak3Ampl];

Social_pks.Oc_theta_Freq = zeros(size(pks_Freqs,1),1);
Social_pks.Oc_theta_Ampl = zeros(size(pks_Freqs,1),1);
Social_pks.Oc_alpha_Freq = zeros(size(pks_Freqs,1),1);
Social_pks.Oc_alpha_Ampl = zeros(size(pks_Freqs,1),1);

for ss = 1:size(pks_Freqs,1)
    Freqs_cur = pks_Freqs(ss,:);
    Ampls_cur = pks_Ampls(ss,:);
    % theta
    Ind_th = find((7 >= Freqs_cur) & (Freqs_cur >= 4));
    if isempty(Ind_th) % no theta peak
        Social_pks.Oc_theta_Freq(ss) = NaN;
        Social_pks.Oc_theta_Ampl(ss) = NaN;
    elseif size(Ind_th,2) == 1 % 1 peak in theta
        Social_pks.Oc_theta_Freq(ss) = Freqs_cur(1,Ind_th);
        Social_pks.Oc_theta_Ampl(ss) = Ampls_cur(1,Ind_th);
    elseif size(Ind_th,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple theta peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_th);
        Th_pks_am = Ampls_cur(1,Ind_th);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        Social_pks.Oc_theta_Freq(ss) = Th_pks_fr(Ind_lp);
        Social_pks.Oc_theta_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
        
    end
    clear Ind_th
    
    % alpha
    Ind_al = find((12 >= Freqs_cur) & (Freqs_cur >= 8));
    if isempty(Ind_al) % no alpha peak
        Social_pks.Oc_alpha_Freq(ss) = NaN;
        Social_pks.Oc_alpha_Ampl(ss) = NaN;
    elseif size(Ind_al,2) == 1 % 1 peak in alpha
        Social_pks.Oc_alpha_Freq(ss) = Freqs_cur(1,Ind_al);
        Social_pks.Oc_alpha_Ampl(ss) = Ampls_cur(1,Ind_al);
    elseif size(Ind_al,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple alpha peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_al);
        Th_pks_am = Ampls_cur(1,Ind_al);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        Social_pks.Oc_alpha_Freq(ss) = Th_pks_fr(Ind_lp);
        Social_pks.Oc_alpha_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
    end
    clear Ind_al
    clear Freqs_cur Ampls_cur
end 

clear ss pks_Ampls pks_Freqs

%% Create table and save data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Data = struct2table(Social_pks);
SP_Soc_FOOOFPeaks_perRegion = [SP_Soc_EEGmeasures_perRegion.ID Data];

save('SP_Soc_FOOOFPeaks_perRegion.mat','SP_Soc_FOOOFPeaks_perRegion')
% clear up
clear SP_Soc_FOOOFPeaks_perRegion Data Social_pks 
clear SP_Soc_EEGmeasures_perRegion





%% Non-Social condition

cd('XXX')
load SP_NSoc_EEGmeasures_perRegion.mat

% Front %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Front all freqs
pks_Freqs = [SP_NSoc_EEGmeasures_perRegion.Fr_peak1Freq SP_NSoc_EEGmeasures_perRegion.Fr_peak2Freq ...
    SP_NSoc_EEGmeasures_perRegion.Fr_peak3Freq];
% Front all ampls
pks_Ampls = [SP_NSoc_EEGmeasures_perRegion.Fr_peak1Ampl SP_NSoc_EEGmeasures_perRegion.Fr_peak2Ampl ...
    SP_NSoc_EEGmeasures_perRegion.Fr_peak3Ampl];

NonSocial_pks = struct();
NonSocial_pks.Fr_theta_Freq = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Fr_theta_Ampl = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Fr_alpha_Freq = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Fr_alpha_Ampl = zeros(size(pks_Freqs,1),1);

for ss = 1:size(pks_Freqs,1)
    Freqs_cur = pks_Freqs(ss,:);
    Ampls_cur = pks_Ampls(ss,:);
    % theta
    Ind_th = find((7 >= Freqs_cur) & (Freqs_cur >= 4));
    if isempty(Ind_th) % no theta peak
        NonSocial_pks.Fr_theta_Freq(ss) = NaN;
        NonSocial_pks.Fr_theta_Ampl(ss) = NaN;
    elseif size(Ind_th,2) == 1 % 1 peak in theta
        NonSocial_pks.Fr_theta_Freq(ss) = Freqs_cur(1,Ind_th);
        NonSocial_pks.Fr_theta_Ampl(ss) = Ampls_cur(1,Ind_th);
    elseif size(Ind_th,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple theta peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_th);
        Th_pks_am = Ampls_cur(1,Ind_th);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        NonSocial_pks.Fr_theta_Freq(ss) = Th_pks_fr(Ind_lp);
        NonSocial_pks.Fr_theta_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
        
    end
    clear Ind_th
    
    % alpha
    Ind_al = find((12 >= Freqs_cur) & (Freqs_cur >= 8));
    if isempty(Ind_al) % no alpha peak
        NonSocial_pks.Fr_alpha_Freq(ss) = NaN;
        NonSocial_pks.Fr_alpha_Ampl(ss) = NaN;
    elseif size(Ind_al,2) == 1 % 1 peak in alpha
        NonSocial_pks.Fr_alpha_Freq(ss) = Freqs_cur(1,Ind_al);
        NonSocial_pks.Fr_alpha_Ampl(ss) = Ampls_cur(1,Ind_al);
    elseif size(Ind_al,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple alpha peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_al);
        Th_pks_am = Ampls_cur(1,Ind_al);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        NonSocial_pks.Fr_alpha_Freq(ss) = Th_pks_fr(Ind_lp);
        NonSocial_pks.Fr_alpha_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
    end
    clear Ind_al
    clear Freqs_cur Ampls_cur
end 

clear ss pks_Ampls pks_Freqs

% Central %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ce all freqs
pks_Freqs = [SP_NSoc_EEGmeasures_perRegion.Ce_peak1Freq SP_NSoc_EEGmeasures_perRegion.Ce_peak2Freq ...
    SP_NSoc_EEGmeasures_perRegion.Ce_peak3Freq];
% Ce all ampls
pks_Ampls = [SP_NSoc_EEGmeasures_perRegion.Ce_peak1Ampl SP_NSoc_EEGmeasures_perRegion.Ce_peak2Ampl ...
    SP_NSoc_EEGmeasures_perRegion.Ce_peak3Ampl];

NonSocial_pks.Ce_theta_Freq = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Ce_theta_Ampl = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Ce_alpha_Freq = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Ce_alpha_Ampl = zeros(size(pks_Freqs,1),1);

for ss = 1:size(pks_Freqs,1)
    Freqs_cur = pks_Freqs(ss,:);
    Ampls_cur = pks_Ampls(ss,:);
    % theta
    Ind_th = find((7 >= Freqs_cur) & (Freqs_cur >= 4));
    if isempty(Ind_th) % no theta peak
        NonSocial_pks.Ce_theta_Freq(ss) = NaN;
        NonSocial_pks.Ce_theta_Ampl(ss) = NaN;
    elseif size(Ind_th,2) == 1 % 1 peak in theta
        NonSocial_pks.Ce_theta_Freq(ss) = Freqs_cur(1,Ind_th);
        NonSocial_pks.Ce_theta_Ampl(ss) = Ampls_cur(1,Ind_th);
    elseif size(Ind_th,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple theta peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_th);
        Th_pks_am = Ampls_cur(1,Ind_th);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        NonSocial_pks.Ce_theta_Freq(ss) = Th_pks_fr(Ind_lp);
        NonSocial_pks.Ce_theta_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
        
    end
    clear Ind_th
    
    % alpha
    Ind_al = find((12 >= Freqs_cur) & (Freqs_cur >= 8));
    if isempty(Ind_al) % no alpha peak
        NonSocial_pks.Ce_alpha_Freq(ss) = NaN;
        NonSocial_pks.Ce_alpha_Ampl(ss) = NaN;
    elseif size(Ind_al,2) == 1 % 1 peak in alpha
        NonSocial_pks.Ce_alpha_Freq(ss) = Freqs_cur(1,Ind_al);
        NonSocial_pks.Ce_alpha_Ampl(ss) = Ampls_cur(1,Ind_al);
    elseif size(Ind_al,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple alpha peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_al);
        Th_pks_am = Ampls_cur(1,Ind_al);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        NonSocial_pks.Ce_alpha_Freq(ss) = Th_pks_fr(Ind_lp);
        NonSocial_pks.Ce_alpha_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
    end
    clear Ind_al
    clear Freqs_cur Ampls_cur
end 

clear ss pks_Ampls pks_Freqs

% Parietal %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Pa all freqs
pks_Freqs = [SP_NSoc_EEGmeasures_perRegion.Pa_peak1Freq SP_NSoc_EEGmeasures_perRegion.Pa_peak2Freq ...
    SP_NSoc_EEGmeasures_perRegion.Pa_peak3Freq];
% Pa all ampls
pks_Ampls = [SP_NSoc_EEGmeasures_perRegion.Pa_peak1Ampl SP_NSoc_EEGmeasures_perRegion.Pa_peak2Ampl ...
    SP_NSoc_EEGmeasures_perRegion.Pa_peak3Ampl];

NonSocial_pks.Pa_theta_Freq = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Pa_theta_Ampl = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Pa_alpha_Freq = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Pa_alpha_Ampl = zeros(size(pks_Freqs,1),1);

for ss = 1:size(pks_Freqs,1)
    Freqs_cur = pks_Freqs(ss,:);
    Ampls_cur = pks_Ampls(ss,:);
    % theta
    Ind_th = find((7 >= Freqs_cur) & (Freqs_cur >= 4));
    if isempty(Ind_th) % no theta peak
        NonSocial_pks.Pa_theta_Freq(ss) = NaN;
        NonSocial_pks.Pa_theta_Ampl(ss) = NaN;
    elseif size(Ind_th,2) == 1 % 1 peak in theta
        NonSocial_pks.Pa_theta_Freq(ss) = Freqs_cur(1,Ind_th);
        NonSocial_pks.Pa_theta_Ampl(ss) = Ampls_cur(1,Ind_th);
    elseif size(Ind_th,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple theta peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_th);
        Th_pks_am = Ampls_cur(1,Ind_th);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        NonSocial_pks.Pa_theta_Freq(ss) = Th_pks_fr(Ind_lp);
        NonSocial_pks.Pa_theta_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
        
    end
    clear Ind_th
    
    % alpha
    Ind_al = find((12 >= Freqs_cur) & (Freqs_cur >= 8));
    if isempty(Ind_al) % no alpha peak
        NonSocial_pks.Pa_alpha_Freq(ss) = NaN;
        NonSocial_pks.Pa_alpha_Ampl(ss) = NaN;
    elseif size(Ind_al,2) == 1 % 1 peak in alpha
        NonSocial_pks.Pa_alpha_Freq(ss) = Freqs_cur(1,Ind_al);
        NonSocial_pks.Pa_alpha_Ampl(ss) = Ampls_cur(1,Ind_al);
    elseif size(Ind_al,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple alpha peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_al);
        Th_pks_am = Ampls_cur(1,Ind_al);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        NonSocial_pks.Pa_alpha_Freq(ss) = Th_pks_fr(Ind_lp);
        NonSocial_pks.Pa_alpha_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
    end
    clear Ind_al
    clear Freqs_cur Ampls_cur
end 

clear ss pks_Ampls pks_Freqs


% Occipital %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Oc all freqs
pks_Freqs = [SP_NSoc_EEGmeasures_perRegion.Oc_peak1Freq SP_NSoc_EEGmeasures_perRegion.Oc_peak2Freq ...
    SP_NSoc_EEGmeasures_perRegion.Oc_peak3Freq];
% Oc all ampls
pks_Ampls = [SP_NSoc_EEGmeasures_perRegion.Oc_peak1Ampl SP_NSoc_EEGmeasures_perRegion.Oc_peak2Ampl ...
    SP_NSoc_EEGmeasures_perRegion.Oc_peak3Ampl];

NonSocial_pks.Oc_theta_Freq = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Oc_theta_Ampl = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Oc_alpha_Freq = zeros(size(pks_Freqs,1),1);
NonSocial_pks.Oc_alpha_Ampl = zeros(size(pks_Freqs,1),1);

for ss = 1:size(pks_Freqs,1)
    Freqs_cur = pks_Freqs(ss,:);
    Ampls_cur = pks_Ampls(ss,:);
    % theta
    Ind_th = find((7 >= Freqs_cur) & (Freqs_cur >= 4));
    if isempty(Ind_th) % no theta peak
        NonSocial_pks.Oc_theta_Freq(ss) = NaN;
        NonSocial_pks.Oc_theta_Ampl(ss) = NaN;
    elseif size(Ind_th,2) == 1 % 1 peak in theta
        NonSocial_pks.Oc_theta_Freq(ss) = Freqs_cur(1,Ind_th);
        NonSocial_pks.Oc_theta_Ampl(ss) = Ampls_cur(1,Ind_th);
    elseif size(Ind_th,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple theta peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_th);
        Th_pks_am = Ampls_cur(1,Ind_th);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        NonSocial_pks.Oc_theta_Freq(ss) = Th_pks_fr(Ind_lp);
        NonSocial_pks.Oc_theta_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
        
    end
    clear Ind_th
    
    % alpha
    Ind_al = find((12 >= Freqs_cur) & (Freqs_cur >= 8));
    if isempty(Ind_al) % no alpha peak
        NonSocial_pks.Oc_alpha_Freq(ss) = NaN;
        NonSocial_pks.Oc_alpha_Ampl(ss) = NaN;
    elseif size(Ind_al,2) == 1 % 1 peak in alpha
        NonSocial_pks.Oc_alpha_Freq(ss) = Freqs_cur(1,Ind_al);
        NonSocial_pks.Oc_alpha_Ampl(ss) = Ampls_cur(1,Ind_al);
    elseif size(Ind_al,2) > 1 % multiple peaks in theta
        disp(strcat(num2str(ss), ': Multiple alpha peaks'))
        Th_pks_fr = Freqs_cur(1,Ind_al);
        Th_pks_am = Ampls_cur(1,Ind_al);
        % find the largest theta peak
        Ind_lp = find(Th_pks_am == max(Th_pks_am));
        if size(Ind_lp,2) > 1
            Ind_lp = Ind_lp(1,1);
        end
        NonSocial_pks.Oc_alpha_Freq(ss) = Th_pks_fr(Ind_lp);
        NonSocial_pks.Oc_alpha_Ampl(ss) = Th_pks_am(Ind_lp);
        clear Th_pks_fr Th_pks_am Ind_lp
    end
    clear Ind_al
    clear Freqs_cur Ampls_cur
end 

clear ss pks_Ampls pks_Freqs

%% Create table and save data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Data = struct2table(NonSocial_pks);
SP_NSoc_FOOOFPeaks_perRegion = [SP_NSoc_EEGmeasures_perRegion.ID Data];

save('SP_NSoc_FOOOFPeaks_perRegion.mat','SP_NSoc_FOOOFPeaks_perRegion')
% clear up
clear SP_NSoc_FOOOFPeaks_perRegion Data NonSocial_pks 
clear SP_NSoc_EEGmeasures_perRegion


